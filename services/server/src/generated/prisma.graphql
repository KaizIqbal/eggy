# source: https://eu1.prisma.sh/k-a-i-z-b4e086/eggy/dev
# timestamp: Thu Feb 06 2020 06:16:05 GMT+0000 (Coordinated Universal Time)

type AggregateCursor {
  count: Int!
}

type AggregateEgg {
  count: Int!
}

type AggregateFlavour {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type BatchPayload {
  """The number of nodes that have been affected by the Batch operation."""
  count: Long!
}

type Cursor implements Node {
  id: ID!
  name: String!
  frames: Int!
  flavour: Flavour!
}

"""A connection to a list of items."""
type CursorConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [CursorEdge]!
  aggregate: AggregateCursor!
}

input CursorCreateInput {
  id: ID
  name: String!
  frames: Int!
  flavour: FlavourCreateOneInput!
}

"""An edge in a connection."""
type CursorEdge {
  """The item at the end of the edge."""
  node: Cursor!

  """A cursor for use in pagination."""
  cursor: String!
}

enum CursorOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  frames_ASC
  frames_DESC
}

type CursorPreviousValues {
  id: ID!
  name: String!
  frames: Int!
}

type CursorSubscriptionPayload {
  mutation: MutationType!
  node: Cursor
  updatedFields: [String!]
  previousValues: CursorPreviousValues
}

input CursorSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [CursorSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [CursorSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [CursorSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: CursorWhereInput
}

enum cursorType {
  WINDOW
  LINUX
}

input CursorUpdateInput {
  name: String
  frames: Int
  flavour: FlavourUpdateOneRequiredInput
}

input CursorUpdateManyMutationInput {
  name: String
  frames: Int
}

input CursorWhereInput {
  """Logical AND on all given filters."""
  AND: [CursorWhereInput!]

  """Logical OR on all given filters."""
  OR: [CursorWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [CursorWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  frames: Int

  """All values that are not equal to given value."""
  frames_not: Int

  """All values that are contained in given list."""
  frames_in: [Int!]

  """All values that are not contained in given list."""
  frames_not_in: [Int!]

  """All values less than the given value."""
  frames_lt: Int

  """All values less than or equal the given value."""
  frames_lte: Int

  """All values greater than the given value."""
  frames_gt: Int

  """All values greater than or equal the given value."""
  frames_gte: Int
  flavour: FlavourWhereInput
}

input CursorWhereUniqueInput {
  id: ID
}

scalar DateTime

type Egg implements Node {
  id: ID!
  title: String!
  eggname: String!
  isPublished: Boolean!
  createdAt: DateTime!
  updatedAt: DateTime!
  user: User!
  cursorTypes: [cursorType!]!
}

"""A connection to a list of items."""
type EggConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [EggEdge]!
  aggregate: AggregateEgg!
}

input EggCreatecursorTypesInput {
  set: [cursorType!]
}

input EggCreateInput {
  id: ID
  title: String!
  eggname: String!
  isPublished: Boolean
  cursorTypes: EggCreatecursorTypesInput
  user: UserCreateOneInput!
}

input EggCreateOneInput {
  create: EggCreateInput
  connect: EggWhereUniqueInput
}

"""An edge in a connection."""
type EggEdge {
  """The item at the end of the edge."""
  node: Egg!

  """A cursor for use in pagination."""
  cursor: String!
}

enum EggOrderByInput {
  id_ASC
  id_DESC
  title_ASC
  title_DESC
  eggname_ASC
  eggname_DESC
  isPublished_ASC
  isPublished_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type EggPreviousValues {
  id: ID!
  title: String!
  eggname: String!
  isPublished: Boolean!
  createdAt: DateTime!
  updatedAt: DateTime!
  cursorTypes: [cursorType!]!
}

type EggSubscriptionPayload {
  mutation: MutationType!
  node: Egg
  updatedFields: [String!]
  previousValues: EggPreviousValues
}

input EggSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [EggSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [EggSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [EggSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: EggWhereInput
}

input EggUpdatecursorTypesInput {
  set: [cursorType!]
}

input EggUpdateDataInput {
  title: String
  eggname: String
  isPublished: Boolean
  cursorTypes: EggUpdatecursorTypesInput
  user: UserUpdateOneRequiredInput
}

input EggUpdateInput {
  title: String
  eggname: String
  isPublished: Boolean
  cursorTypes: EggUpdatecursorTypesInput
  user: UserUpdateOneRequiredInput
}

input EggUpdateManyMutationInput {
  title: String
  eggname: String
  isPublished: Boolean
  cursorTypes: EggUpdatecursorTypesInput
}

input EggUpdateOneRequiredInput {
  create: EggCreateInput
  connect: EggWhereUniqueInput
  update: EggUpdateDataInput
  upsert: EggUpsertNestedInput
}

input EggUpsertNestedInput {
  update: EggUpdateDataInput!
  create: EggCreateInput!
}

input EggWhereInput {
  """Logical AND on all given filters."""
  AND: [EggWhereInput!]

  """Logical OR on all given filters."""
  OR: [EggWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [EggWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  title: String

  """All values that are not equal to given value."""
  title_not: String

  """All values that are contained in given list."""
  title_in: [String!]

  """All values that are not contained in given list."""
  title_not_in: [String!]

  """All values less than the given value."""
  title_lt: String

  """All values less than or equal the given value."""
  title_lte: String

  """All values greater than the given value."""
  title_gt: String

  """All values greater than or equal the given value."""
  title_gte: String

  """All values containing the given string."""
  title_contains: String

  """All values not containing the given string."""
  title_not_contains: String

  """All values starting with the given string."""
  title_starts_with: String

  """All values not starting with the given string."""
  title_not_starts_with: String

  """All values ending with the given string."""
  title_ends_with: String

  """All values not ending with the given string."""
  title_not_ends_with: String
  eggname: String

  """All values that are not equal to given value."""
  eggname_not: String

  """All values that are contained in given list."""
  eggname_in: [String!]

  """All values that are not contained in given list."""
  eggname_not_in: [String!]

  """All values less than the given value."""
  eggname_lt: String

  """All values less than or equal the given value."""
  eggname_lte: String

  """All values greater than the given value."""
  eggname_gt: String

  """All values greater than or equal the given value."""
  eggname_gte: String

  """All values containing the given string."""
  eggname_contains: String

  """All values not containing the given string."""
  eggname_not_contains: String

  """All values starting with the given string."""
  eggname_starts_with: String

  """All values not starting with the given string."""
  eggname_not_starts_with: String

  """All values ending with the given string."""
  eggname_ends_with: String

  """All values not ending with the given string."""
  eggname_not_ends_with: String
  isPublished: Boolean

  """All values that are not equal to given value."""
  isPublished_not: Boolean
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  user: UserWhereInput
}

input EggWhereUniqueInput {
  id: ID
  eggname: String
}

type Flavour implements Node {
  id: ID!
  name: String!
  egg: Egg!
}

"""A connection to a list of items."""
type FlavourConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [FlavourEdge]!
  aggregate: AggregateFlavour!
}

input FlavourCreateInput {
  id: ID
  name: String!
  egg: EggCreateOneInput!
}

input FlavourCreateOneInput {
  create: FlavourCreateInput
  connect: FlavourWhereUniqueInput
}

"""An edge in a connection."""
type FlavourEdge {
  """The item at the end of the edge."""
  node: Flavour!

  """A cursor for use in pagination."""
  cursor: String!
}

enum FlavourOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
}

type FlavourPreviousValues {
  id: ID!
  name: String!
}

type FlavourSubscriptionPayload {
  mutation: MutationType!
  node: Flavour
  updatedFields: [String!]
  previousValues: FlavourPreviousValues
}

input FlavourSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [FlavourSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [FlavourSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [FlavourSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: FlavourWhereInput
}

input FlavourUpdateDataInput {
  name: String
  egg: EggUpdateOneRequiredInput
}

input FlavourUpdateInput {
  name: String
  egg: EggUpdateOneRequiredInput
}

input FlavourUpdateManyMutationInput {
  name: String
}

input FlavourUpdateOneRequiredInput {
  create: FlavourCreateInput
  connect: FlavourWhereUniqueInput
  update: FlavourUpdateDataInput
  upsert: FlavourUpsertNestedInput
}

input FlavourUpsertNestedInput {
  update: FlavourUpdateDataInput!
  create: FlavourCreateInput!
}

input FlavourWhereInput {
  """Logical AND on all given filters."""
  AND: [FlavourWhereInput!]

  """Logical OR on all given filters."""
  OR: [FlavourWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [FlavourWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  egg: EggWhereInput
}

input FlavourWhereUniqueInput {
  id: ID
  name: String
}

"""
The `Long` scalar type represents non-fractional signed whole numeric values.
Long can represent values between -(2^63) and 2^63 - 1.
"""
scalar Long

type Mutation {
  createCursor(data: CursorCreateInput!): Cursor!
  createEgg(data: EggCreateInput!): Egg!
  createFlavour(data: FlavourCreateInput!): Flavour!
  createUser(data: UserCreateInput!): User!
  updateCursor(data: CursorUpdateInput!, where: CursorWhereUniqueInput!): Cursor
  updateEgg(data: EggUpdateInput!, where: EggWhereUniqueInput!): Egg
  updateFlavour(data: FlavourUpdateInput!, where: FlavourWhereUniqueInput!): Flavour
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  deleteCursor(where: CursorWhereUniqueInput!): Cursor
  deleteEgg(where: EggWhereUniqueInput!): Egg
  deleteFlavour(where: FlavourWhereUniqueInput!): Flavour
  deleteUser(where: UserWhereUniqueInput!): User
  upsertCursor(where: CursorWhereUniqueInput!, create: CursorCreateInput!, update: CursorUpdateInput!): Cursor!
  upsertEgg(where: EggWhereUniqueInput!, create: EggCreateInput!, update: EggUpdateInput!): Egg!
  upsertFlavour(where: FlavourWhereUniqueInput!, create: FlavourCreateInput!, update: FlavourUpdateInput!): Flavour!
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  updateManyCursors(data: CursorUpdateManyMutationInput!, where: CursorWhereInput): BatchPayload!
  updateManyEggs(data: EggUpdateManyMutationInput!, where: EggWhereInput): BatchPayload!
  updateManyFlavours(data: FlavourUpdateManyMutationInput!, where: FlavourWhereInput): BatchPayload!
  updateManyUsers(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  deleteManyCursors(where: CursorWhereInput): BatchPayload!
  deleteManyEggs(where: EggWhereInput): BatchPayload!
  deleteManyFlavours(where: FlavourWhereInput): BatchPayload!
  deleteManyUsers(where: UserWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

"""An object with an ID"""
interface Node {
  """The id of the object."""
  id: ID!
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

enum Permission {
  ADMIN
  USER
  EGGCREATE
  EGGUPDATE
  EGGDELETE
  PERMISSIONUPDATE
}

type Query {
  cursors(where: CursorWhereInput, orderBy: CursorOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Cursor]!
  eggs(where: EggWhereInput, orderBy: EggOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Egg]!
  flavours(where: FlavourWhereInput, orderBy: FlavourOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Flavour]!
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  cursor(where: CursorWhereUniqueInput!): Cursor
  egg(where: EggWhereUniqueInput!): Egg
  flavour(where: FlavourWhereUniqueInput!): Flavour
  user(where: UserWhereUniqueInput!): User
  cursorsConnection(where: CursorWhereInput, orderBy: CursorOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): CursorConnection!
  eggsConnection(where: EggWhereInput, orderBy: EggOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): EggConnection!
  flavoursConnection(where: FlavourWhereInput, orderBy: FlavourOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): FlavourConnection!
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!

  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node
}

type Subscription {
  cursor(where: CursorSubscriptionWhereInput): CursorSubscriptionPayload
  egg(where: EggSubscriptionWhereInput): EggSubscriptionPayload
  flavour(where: FlavourSubscriptionWhereInput): FlavourSubscriptionPayload
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
}

type User implements Node {
  id: ID!
  name: String!
  username: String!
  email: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  password: String!
  resetToken: String
  resetTokenExpiry: String
  permissions: [Permission!]!
}

"""A connection to a list of items."""
type UserConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  id: ID
  name: String!
  username: String!
  email: String!
  password: String!
  resetToken: String
  resetTokenExpiry: String
  permissions: UserCreatepermissionsInput
}

input UserCreateOneInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
}

input UserCreatepermissionsInput {
  set: [Permission!]
}

"""An edge in a connection."""
type UserEdge {
  """The item at the end of the edge."""
  node: User!

  """A cursor for use in pagination."""
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  username_ASC
  username_DESC
  email_ASC
  email_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  password_ASC
  password_DESC
  resetToken_ASC
  resetToken_DESC
  resetTokenExpiry_ASC
  resetTokenExpiry_DESC
}

type UserPreviousValues {
  id: ID!
  name: String!
  username: String!
  email: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  password: String!
  resetToken: String
  resetTokenExpiry: String
  permissions: [Permission!]!
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [UserSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: UserWhereInput
}

input UserUpdateDataInput {
  name: String
  username: String
  email: String
  password: String
  resetToken: String
  resetTokenExpiry: String
  permissions: UserUpdatepermissionsInput
}

input UserUpdateInput {
  name: String
  username: String
  email: String
  password: String
  resetToken: String
  resetTokenExpiry: String
  permissions: UserUpdatepermissionsInput
}

input UserUpdateManyMutationInput {
  name: String
  username: String
  email: String
  password: String
  resetToken: String
  resetTokenExpiry: String
  permissions: UserUpdatepermissionsInput
}

input UserUpdateOneRequiredInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
  update: UserUpdateDataInput
  upsert: UserUpsertNestedInput
}

input UserUpdatepermissionsInput {
  set: [Permission!]
}

input UserUpsertNestedInput {
  update: UserUpdateDataInput!
  create: UserCreateInput!
}

input UserWhereInput {
  """Logical AND on all given filters."""
  AND: [UserWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  username: String

  """All values that are not equal to given value."""
  username_not: String

  """All values that are contained in given list."""
  username_in: [String!]

  """All values that are not contained in given list."""
  username_not_in: [String!]

  """All values less than the given value."""
  username_lt: String

  """All values less than or equal the given value."""
  username_lte: String

  """All values greater than the given value."""
  username_gt: String

  """All values greater than or equal the given value."""
  username_gte: String

  """All values containing the given string."""
  username_contains: String

  """All values not containing the given string."""
  username_not_contains: String

  """All values starting with the given string."""
  username_starts_with: String

  """All values not starting with the given string."""
  username_not_starts_with: String

  """All values ending with the given string."""
  username_ends_with: String

  """All values not ending with the given string."""
  username_not_ends_with: String
  email: String

  """All values that are not equal to given value."""
  email_not: String

  """All values that are contained in given list."""
  email_in: [String!]

  """All values that are not contained in given list."""
  email_not_in: [String!]

  """All values less than the given value."""
  email_lt: String

  """All values less than or equal the given value."""
  email_lte: String

  """All values greater than the given value."""
  email_gt: String

  """All values greater than or equal the given value."""
  email_gte: String

  """All values containing the given string."""
  email_contains: String

  """All values not containing the given string."""
  email_not_contains: String

  """All values starting with the given string."""
  email_starts_with: String

  """All values not starting with the given string."""
  email_not_starts_with: String

  """All values ending with the given string."""
  email_ends_with: String

  """All values not ending with the given string."""
  email_not_ends_with: String
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  password: String

  """All values that are not equal to given value."""
  password_not: String

  """All values that are contained in given list."""
  password_in: [String!]

  """All values that are not contained in given list."""
  password_not_in: [String!]

  """All values less than the given value."""
  password_lt: String

  """All values less than or equal the given value."""
  password_lte: String

  """All values greater than the given value."""
  password_gt: String

  """All values greater than or equal the given value."""
  password_gte: String

  """All values containing the given string."""
  password_contains: String

  """All values not containing the given string."""
  password_not_contains: String

  """All values starting with the given string."""
  password_starts_with: String

  """All values not starting with the given string."""
  password_not_starts_with: String

  """All values ending with the given string."""
  password_ends_with: String

  """All values not ending with the given string."""
  password_not_ends_with: String
  resetToken: String

  """All values that are not equal to given value."""
  resetToken_not: String

  """All values that are contained in given list."""
  resetToken_in: [String!]

  """All values that are not contained in given list."""
  resetToken_not_in: [String!]

  """All values less than the given value."""
  resetToken_lt: String

  """All values less than or equal the given value."""
  resetToken_lte: String

  """All values greater than the given value."""
  resetToken_gt: String

  """All values greater than or equal the given value."""
  resetToken_gte: String

  """All values containing the given string."""
  resetToken_contains: String

  """All values not containing the given string."""
  resetToken_not_contains: String

  """All values starting with the given string."""
  resetToken_starts_with: String

  """All values not starting with the given string."""
  resetToken_not_starts_with: String

  """All values ending with the given string."""
  resetToken_ends_with: String

  """All values not ending with the given string."""
  resetToken_not_ends_with: String
  resetTokenExpiry: String

  """All values that are not equal to given value."""
  resetTokenExpiry_not: String

  """All values that are contained in given list."""
  resetTokenExpiry_in: [String!]

  """All values that are not contained in given list."""
  resetTokenExpiry_not_in: [String!]

  """All values less than the given value."""
  resetTokenExpiry_lt: String

  """All values less than or equal the given value."""
  resetTokenExpiry_lte: String

  """All values greater than the given value."""
  resetTokenExpiry_gt: String

  """All values greater than or equal the given value."""
  resetTokenExpiry_gte: String

  """All values containing the given string."""
  resetTokenExpiry_contains: String

  """All values not containing the given string."""
  resetTokenExpiry_not_contains: String

  """All values starting with the given string."""
  resetTokenExpiry_starts_with: String

  """All values not starting with the given string."""
  resetTokenExpiry_not_starts_with: String

  """All values ending with the given string."""
  resetTokenExpiry_ends_with: String

  """All values not ending with the given string."""
  resetTokenExpiry_not_ends_with: String
}

input UserWhereUniqueInput {
  id: ID
  username: String
  email: String
}
