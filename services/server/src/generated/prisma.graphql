# source: https://eu1.prisma.sh/k-a-i-z-b4e086/eggy/dev
# timestamp: Fri Mar 06 2020 09:33:46 GMT+0000 (Coordinated Universal Time)

type AggregateCursor {
  count: Int!
}

type AggregateEgg {
  count: Int!
}

type AggregateFile {
  count: Int!
}

type AggregateFlavor {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type BatchPayload {
  """The number of nodes that have been affected by the Batch operation."""
  count: Long!
}

type Cursor implements Node {
  id: ID!
  name: cursorName!
  frames: Int!
  flavor: Flavor!
  source: File
}

"""A connection to a list of items."""
type CursorConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [CursorEdge]!
  aggregate: AggregateCursor!
}

input CursorCreateInput {
  id: ID
  name: cursorName!
  frames: Int!
  flavor: FlavorCreateOneWithoutCursorsInput!
  source: FileCreateOneWithoutCursorInput
}

input CursorCreateManyWithoutFlavorInput {
  create: [CursorCreateWithoutFlavorInput!]
  connect: [CursorWhereUniqueInput!]
}

input CursorCreateOneWithoutSourceInput {
  create: CursorCreateWithoutSourceInput
  connect: CursorWhereUniqueInput
}

input CursorCreateWithoutFlavorInput {
  id: ID
  name: cursorName!
  frames: Int!
  source: FileCreateOneWithoutCursorInput
}

input CursorCreateWithoutSourceInput {
  id: ID
  name: cursorName!
  frames: Int!
  flavor: FlavorCreateOneWithoutCursorsInput!
}

"""An edge in a connection."""
type CursorEdge {
  """The item at the end of the edge."""
  node: Cursor!

  """A cursor for use in pagination."""
  cursor: String!
}

enum cursorName {
  Default
  X11
  Wayland
}

enum CursorOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  frames_ASC
  frames_DESC
}

type CursorPreviousValues {
  id: ID!
  name: cursorName!
  frames: Int!
}

input CursorScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [CursorScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [CursorScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [CursorScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: cursorName

  """All values that are not equal to given value."""
  name_not: cursorName

  """All values that are contained in given list."""
  name_in: [cursorName!]

  """All values that are not contained in given list."""
  name_not_in: [cursorName!]
  frames: Int

  """All values that are not equal to given value."""
  frames_not: Int

  """All values that are contained in given list."""
  frames_in: [Int!]

  """All values that are not contained in given list."""
  frames_not_in: [Int!]

  """All values less than the given value."""
  frames_lt: Int

  """All values less than or equal the given value."""
  frames_lte: Int

  """All values greater than the given value."""
  frames_gt: Int

  """All values greater than or equal the given value."""
  frames_gte: Int
}

type CursorSubscriptionPayload {
  mutation: MutationType!
  node: Cursor
  updatedFields: [String!]
  previousValues: CursorPreviousValues
}

input CursorSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [CursorSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [CursorSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [CursorSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: CursorWhereInput
}

enum cursorType {
  WINDOW
  LINUX
}

input CursorUpdateInput {
  name: cursorName
  frames: Int
  flavor: FlavorUpdateOneRequiredWithoutCursorsInput
  source: FileUpdateOneWithoutCursorInput
}

input CursorUpdateManyDataInput {
  name: cursorName
  frames: Int
}

input CursorUpdateManyMutationInput {
  name: cursorName
  frames: Int
}

input CursorUpdateManyWithoutFlavorInput {
  create: [CursorCreateWithoutFlavorInput!]
  connect: [CursorWhereUniqueInput!]
  set: [CursorWhereUniqueInput!]
  disconnect: [CursorWhereUniqueInput!]
  delete: [CursorWhereUniqueInput!]
  update: [CursorUpdateWithWhereUniqueWithoutFlavorInput!]
  updateMany: [CursorUpdateManyWithWhereNestedInput!]
  deleteMany: [CursorScalarWhereInput!]
  upsert: [CursorUpsertWithWhereUniqueWithoutFlavorInput!]
}

input CursorUpdateManyWithWhereNestedInput {
  where: CursorScalarWhereInput!
  data: CursorUpdateManyDataInput!
}

input CursorUpdateOneRequiredWithoutSourceInput {
  create: CursorCreateWithoutSourceInput
  connect: CursorWhereUniqueInput
  update: CursorUpdateWithoutSourceDataInput
  upsert: CursorUpsertWithoutSourceInput
}

input CursorUpdateWithoutFlavorDataInput {
  name: cursorName
  frames: Int
  source: FileUpdateOneWithoutCursorInput
}

input CursorUpdateWithoutSourceDataInput {
  name: cursorName
  frames: Int
  flavor: FlavorUpdateOneRequiredWithoutCursorsInput
}

input CursorUpdateWithWhereUniqueWithoutFlavorInput {
  where: CursorWhereUniqueInput!
  data: CursorUpdateWithoutFlavorDataInput!
}

input CursorUpsertWithoutSourceInput {
  update: CursorUpdateWithoutSourceDataInput!
  create: CursorCreateWithoutSourceInput!
}

input CursorUpsertWithWhereUniqueWithoutFlavorInput {
  where: CursorWhereUniqueInput!
  update: CursorUpdateWithoutFlavorDataInput!
  create: CursorCreateWithoutFlavorInput!
}

input CursorWhereInput {
  """Logical AND on all given filters."""
  AND: [CursorWhereInput!]

  """Logical OR on all given filters."""
  OR: [CursorWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [CursorWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: cursorName

  """All values that are not equal to given value."""
  name_not: cursorName

  """All values that are contained in given list."""
  name_in: [cursorName!]

  """All values that are not contained in given list."""
  name_not_in: [cursorName!]
  frames: Int

  """All values that are not equal to given value."""
  frames_not: Int

  """All values that are contained in given list."""
  frames_in: [Int!]

  """All values that are not contained in given list."""
  frames_not_in: [Int!]

  """All values less than the given value."""
  frames_lt: Int

  """All values less than or equal the given value."""
  frames_lte: Int

  """All values greater than the given value."""
  frames_gt: Int

  """All values greater than or equal the given value."""
  frames_gte: Int
  flavor: FlavorWhereInput
  source: FileWhereInput
}

input CursorWhereUniqueInput {
  id: ID
}

scalar DateTime

type Egg implements Node {
  id: ID!
  title: String!
  eggname: String!
  isPublished: Boolean!
  createdAt: DateTime!
  updatedAt: DateTime!
  cursorTypes: [cursorType!]!
  user: User!
  flavors(where: FlavorWhereInput, orderBy: FlavorOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Flavor!]
}

"""A connection to a list of items."""
type EggConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [EggEdge]!
  aggregate: AggregateEgg!
}

input EggCreatecursorTypesInput {
  set: [cursorType!]
}

input EggCreateInput {
  id: ID
  title: String!
  eggname: String!
  isPublished: Boolean
  cursorTypes: EggCreatecursorTypesInput
  user: UserCreateOneWithoutEggsInput!
  flavors: FlavorCreateManyWithoutEggInput
}

input EggCreateManyWithoutUserInput {
  create: [EggCreateWithoutUserInput!]
  connect: [EggWhereUniqueInput!]
}

input EggCreateOneWithoutFlavorsInput {
  create: EggCreateWithoutFlavorsInput
  connect: EggWhereUniqueInput
}

input EggCreateWithoutFlavorsInput {
  id: ID
  title: String!
  eggname: String!
  isPublished: Boolean
  cursorTypes: EggCreatecursorTypesInput
  user: UserCreateOneWithoutEggsInput!
}

input EggCreateWithoutUserInput {
  id: ID
  title: String!
  eggname: String!
  isPublished: Boolean
  cursorTypes: EggCreatecursorTypesInput
  flavors: FlavorCreateManyWithoutEggInput
}

"""An edge in a connection."""
type EggEdge {
  """The item at the end of the edge."""
  node: Egg!

  """A cursor for use in pagination."""
  cursor: String!
}

enum EggOrderByInput {
  id_ASC
  id_DESC
  title_ASC
  title_DESC
  eggname_ASC
  eggname_DESC
  isPublished_ASC
  isPublished_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type EggPreviousValues {
  id: ID!
  title: String!
  eggname: String!
  isPublished: Boolean!
  createdAt: DateTime!
  updatedAt: DateTime!
  cursorTypes: [cursorType!]!
}

input EggScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [EggScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [EggScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [EggScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  title: String

  """All values that are not equal to given value."""
  title_not: String

  """All values that are contained in given list."""
  title_in: [String!]

  """All values that are not contained in given list."""
  title_not_in: [String!]

  """All values less than the given value."""
  title_lt: String

  """All values less than or equal the given value."""
  title_lte: String

  """All values greater than the given value."""
  title_gt: String

  """All values greater than or equal the given value."""
  title_gte: String

  """All values containing the given string."""
  title_contains: String

  """All values not containing the given string."""
  title_not_contains: String

  """All values starting with the given string."""
  title_starts_with: String

  """All values not starting with the given string."""
  title_not_starts_with: String

  """All values ending with the given string."""
  title_ends_with: String

  """All values not ending with the given string."""
  title_not_ends_with: String
  eggname: String

  """All values that are not equal to given value."""
  eggname_not: String

  """All values that are contained in given list."""
  eggname_in: [String!]

  """All values that are not contained in given list."""
  eggname_not_in: [String!]

  """All values less than the given value."""
  eggname_lt: String

  """All values less than or equal the given value."""
  eggname_lte: String

  """All values greater than the given value."""
  eggname_gt: String

  """All values greater than or equal the given value."""
  eggname_gte: String

  """All values containing the given string."""
  eggname_contains: String

  """All values not containing the given string."""
  eggname_not_contains: String

  """All values starting with the given string."""
  eggname_starts_with: String

  """All values not starting with the given string."""
  eggname_not_starts_with: String

  """All values ending with the given string."""
  eggname_ends_with: String

  """All values not ending with the given string."""
  eggname_not_ends_with: String
  isPublished: Boolean

  """All values that are not equal to given value."""
  isPublished_not: Boolean
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
}

type EggSubscriptionPayload {
  mutation: MutationType!
  node: Egg
  updatedFields: [String!]
  previousValues: EggPreviousValues
}

input EggSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [EggSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [EggSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [EggSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: EggWhereInput
}

input EggUpdatecursorTypesInput {
  set: [cursorType!]
}

input EggUpdateInput {
  title: String
  eggname: String
  isPublished: Boolean
  cursorTypes: EggUpdatecursorTypesInput
  user: UserUpdateOneRequiredWithoutEggsInput
  flavors: FlavorUpdateManyWithoutEggInput
}

input EggUpdateManyDataInput {
  title: String
  eggname: String
  isPublished: Boolean
  cursorTypes: EggUpdatecursorTypesInput
}

input EggUpdateManyMutationInput {
  title: String
  eggname: String
  isPublished: Boolean
  cursorTypes: EggUpdatecursorTypesInput
}

input EggUpdateManyWithoutUserInput {
  create: [EggCreateWithoutUserInput!]
  connect: [EggWhereUniqueInput!]
  set: [EggWhereUniqueInput!]
  disconnect: [EggWhereUniqueInput!]
  delete: [EggWhereUniqueInput!]
  update: [EggUpdateWithWhereUniqueWithoutUserInput!]
  updateMany: [EggUpdateManyWithWhereNestedInput!]
  deleteMany: [EggScalarWhereInput!]
  upsert: [EggUpsertWithWhereUniqueWithoutUserInput!]
}

input EggUpdateManyWithWhereNestedInput {
  where: EggScalarWhereInput!
  data: EggUpdateManyDataInput!
}

input EggUpdateOneRequiredWithoutFlavorsInput {
  create: EggCreateWithoutFlavorsInput
  connect: EggWhereUniqueInput
  update: EggUpdateWithoutFlavorsDataInput
  upsert: EggUpsertWithoutFlavorsInput
}

input EggUpdateWithoutFlavorsDataInput {
  title: String
  eggname: String
  isPublished: Boolean
  cursorTypes: EggUpdatecursorTypesInput
  user: UserUpdateOneRequiredWithoutEggsInput
}

input EggUpdateWithoutUserDataInput {
  title: String
  eggname: String
  isPublished: Boolean
  cursorTypes: EggUpdatecursorTypesInput
  flavors: FlavorUpdateManyWithoutEggInput
}

input EggUpdateWithWhereUniqueWithoutUserInput {
  where: EggWhereUniqueInput!
  data: EggUpdateWithoutUserDataInput!
}

input EggUpsertWithoutFlavorsInput {
  update: EggUpdateWithoutFlavorsDataInput!
  create: EggCreateWithoutFlavorsInput!
}

input EggUpsertWithWhereUniqueWithoutUserInput {
  where: EggWhereUniqueInput!
  update: EggUpdateWithoutUserDataInput!
  create: EggCreateWithoutUserInput!
}

input EggWhereInput {
  """Logical AND on all given filters."""
  AND: [EggWhereInput!]

  """Logical OR on all given filters."""
  OR: [EggWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [EggWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  title: String

  """All values that are not equal to given value."""
  title_not: String

  """All values that are contained in given list."""
  title_in: [String!]

  """All values that are not contained in given list."""
  title_not_in: [String!]

  """All values less than the given value."""
  title_lt: String

  """All values less than or equal the given value."""
  title_lte: String

  """All values greater than the given value."""
  title_gt: String

  """All values greater than or equal the given value."""
  title_gte: String

  """All values containing the given string."""
  title_contains: String

  """All values not containing the given string."""
  title_not_contains: String

  """All values starting with the given string."""
  title_starts_with: String

  """All values not starting with the given string."""
  title_not_starts_with: String

  """All values ending with the given string."""
  title_ends_with: String

  """All values not ending with the given string."""
  title_not_ends_with: String
  eggname: String

  """All values that are not equal to given value."""
  eggname_not: String

  """All values that are contained in given list."""
  eggname_in: [String!]

  """All values that are not contained in given list."""
  eggname_not_in: [String!]

  """All values less than the given value."""
  eggname_lt: String

  """All values less than or equal the given value."""
  eggname_lte: String

  """All values greater than the given value."""
  eggname_gt: String

  """All values greater than or equal the given value."""
  eggname_gte: String

  """All values containing the given string."""
  eggname_contains: String

  """All values not containing the given string."""
  eggname_not_contains: String

  """All values starting with the given string."""
  eggname_starts_with: String

  """All values not starting with the given string."""
  eggname_not_starts_with: String

  """All values ending with the given string."""
  eggname_ends_with: String

  """All values not ending with the given string."""
  eggname_not_ends_with: String
  isPublished: Boolean

  """All values that are not equal to given value."""
  isPublished_not: Boolean
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  user: UserWhereInput
  flavors_every: FlavorWhereInput
  flavors_some: FlavorWhereInput
  flavors_none: FlavorWhereInput
}

input EggWhereUniqueInput {
  id: ID
  eggname: String
}

type File implements Node {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  key: String!
  filename: String!
  mimetype: String!
  encoding: String!
  url: String!
  cursor: Cursor!
}

"""A connection to a list of items."""
type FileConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [FileEdge]!
  aggregate: AggregateFile!
}

input FileCreateInput {
  id: ID
  key: String!
  filename: String!
  mimetype: String!
  encoding: String!
  url: String!
  cursor: CursorCreateOneWithoutSourceInput!
}

input FileCreateOneWithoutCursorInput {
  create: FileCreateWithoutCursorInput
  connect: FileWhereUniqueInput
}

input FileCreateWithoutCursorInput {
  id: ID
  key: String!
  filename: String!
  mimetype: String!
  encoding: String!
  url: String!
}

"""An edge in a connection."""
type FileEdge {
  """The item at the end of the edge."""
  node: File!

  """A cursor for use in pagination."""
  cursor: String!
}

enum FileOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  key_ASC
  key_DESC
  filename_ASC
  filename_DESC
  mimetype_ASC
  mimetype_DESC
  encoding_ASC
  encoding_DESC
  url_ASC
  url_DESC
}

type FilePreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  key: String!
  filename: String!
  mimetype: String!
  encoding: String!
  url: String!
}

type FileSubscriptionPayload {
  mutation: MutationType!
  node: File
  updatedFields: [String!]
  previousValues: FilePreviousValues
}

input FileSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [FileSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [FileSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [FileSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: FileWhereInput
}

input FileUpdateInput {
  key: String
  filename: String
  mimetype: String
  encoding: String
  url: String
  cursor: CursorUpdateOneRequiredWithoutSourceInput
}

input FileUpdateManyMutationInput {
  key: String
  filename: String
  mimetype: String
  encoding: String
  url: String
}

input FileUpdateOneWithoutCursorInput {
  create: FileCreateWithoutCursorInput
  connect: FileWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: FileUpdateWithoutCursorDataInput
  upsert: FileUpsertWithoutCursorInput
}

input FileUpdateWithoutCursorDataInput {
  key: String
  filename: String
  mimetype: String
  encoding: String
  url: String
}

input FileUpsertWithoutCursorInput {
  update: FileUpdateWithoutCursorDataInput!
  create: FileCreateWithoutCursorInput!
}

input FileWhereInput {
  """Logical AND on all given filters."""
  AND: [FileWhereInput!]

  """Logical OR on all given filters."""
  OR: [FileWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [FileWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  key: String

  """All values that are not equal to given value."""
  key_not: String

  """All values that are contained in given list."""
  key_in: [String!]

  """All values that are not contained in given list."""
  key_not_in: [String!]

  """All values less than the given value."""
  key_lt: String

  """All values less than or equal the given value."""
  key_lte: String

  """All values greater than the given value."""
  key_gt: String

  """All values greater than or equal the given value."""
  key_gte: String

  """All values containing the given string."""
  key_contains: String

  """All values not containing the given string."""
  key_not_contains: String

  """All values starting with the given string."""
  key_starts_with: String

  """All values not starting with the given string."""
  key_not_starts_with: String

  """All values ending with the given string."""
  key_ends_with: String

  """All values not ending with the given string."""
  key_not_ends_with: String
  filename: String

  """All values that are not equal to given value."""
  filename_not: String

  """All values that are contained in given list."""
  filename_in: [String!]

  """All values that are not contained in given list."""
  filename_not_in: [String!]

  """All values less than the given value."""
  filename_lt: String

  """All values less than or equal the given value."""
  filename_lte: String

  """All values greater than the given value."""
  filename_gt: String

  """All values greater than or equal the given value."""
  filename_gte: String

  """All values containing the given string."""
  filename_contains: String

  """All values not containing the given string."""
  filename_not_contains: String

  """All values starting with the given string."""
  filename_starts_with: String

  """All values not starting with the given string."""
  filename_not_starts_with: String

  """All values ending with the given string."""
  filename_ends_with: String

  """All values not ending with the given string."""
  filename_not_ends_with: String
  mimetype: String

  """All values that are not equal to given value."""
  mimetype_not: String

  """All values that are contained in given list."""
  mimetype_in: [String!]

  """All values that are not contained in given list."""
  mimetype_not_in: [String!]

  """All values less than the given value."""
  mimetype_lt: String

  """All values less than or equal the given value."""
  mimetype_lte: String

  """All values greater than the given value."""
  mimetype_gt: String

  """All values greater than or equal the given value."""
  mimetype_gte: String

  """All values containing the given string."""
  mimetype_contains: String

  """All values not containing the given string."""
  mimetype_not_contains: String

  """All values starting with the given string."""
  mimetype_starts_with: String

  """All values not starting with the given string."""
  mimetype_not_starts_with: String

  """All values ending with the given string."""
  mimetype_ends_with: String

  """All values not ending with the given string."""
  mimetype_not_ends_with: String
  encoding: String

  """All values that are not equal to given value."""
  encoding_not: String

  """All values that are contained in given list."""
  encoding_in: [String!]

  """All values that are not contained in given list."""
  encoding_not_in: [String!]

  """All values less than the given value."""
  encoding_lt: String

  """All values less than or equal the given value."""
  encoding_lte: String

  """All values greater than the given value."""
  encoding_gt: String

  """All values greater than or equal the given value."""
  encoding_gte: String

  """All values containing the given string."""
  encoding_contains: String

  """All values not containing the given string."""
  encoding_not_contains: String

  """All values starting with the given string."""
  encoding_starts_with: String

  """All values not starting with the given string."""
  encoding_not_starts_with: String

  """All values ending with the given string."""
  encoding_ends_with: String

  """All values not ending with the given string."""
  encoding_not_ends_with: String
  url: String

  """All values that are not equal to given value."""
  url_not: String

  """All values that are contained in given list."""
  url_in: [String!]

  """All values that are not contained in given list."""
  url_not_in: [String!]

  """All values less than the given value."""
  url_lt: String

  """All values less than or equal the given value."""
  url_lte: String

  """All values greater than the given value."""
  url_gt: String

  """All values greater than or equal the given value."""
  url_gte: String

  """All values containing the given string."""
  url_contains: String

  """All values not containing the given string."""
  url_not_contains: String

  """All values starting with the given string."""
  url_starts_with: String

  """All values not starting with the given string."""
  url_not_starts_with: String

  """All values ending with the given string."""
  url_ends_with: String

  """All values not ending with the given string."""
  url_not_ends_with: String
  cursor: CursorWhereInput
}

input FileWhereUniqueInput {
  id: ID
  url: String
}

type Flavor implements Node {
  id: ID!
  name: String!
  egg: Egg!
  cursors(where: CursorWhereInput, orderBy: CursorOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Cursor!]
}

"""A connection to a list of items."""
type FlavorConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [FlavorEdge]!
  aggregate: AggregateFlavor!
}

input FlavorCreateInput {
  id: ID
  name: String!
  egg: EggCreateOneWithoutFlavorsInput!
  cursors: CursorCreateManyWithoutFlavorInput
}

input FlavorCreateManyWithoutEggInput {
  create: [FlavorCreateWithoutEggInput!]
  connect: [FlavorWhereUniqueInput!]
}

input FlavorCreateOneWithoutCursorsInput {
  create: FlavorCreateWithoutCursorsInput
  connect: FlavorWhereUniqueInput
}

input FlavorCreateWithoutCursorsInput {
  id: ID
  name: String!
  egg: EggCreateOneWithoutFlavorsInput!
}

input FlavorCreateWithoutEggInput {
  id: ID
  name: String!
  cursors: CursorCreateManyWithoutFlavorInput
}

"""An edge in a connection."""
type FlavorEdge {
  """The item at the end of the edge."""
  node: Flavor!

  """A cursor for use in pagination."""
  cursor: String!
}

enum FlavorOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
}

type FlavorPreviousValues {
  id: ID!
  name: String!
}

input FlavorScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [FlavorScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [FlavorScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [FlavorScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
}

type FlavorSubscriptionPayload {
  mutation: MutationType!
  node: Flavor
  updatedFields: [String!]
  previousValues: FlavorPreviousValues
}

input FlavorSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [FlavorSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [FlavorSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [FlavorSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: FlavorWhereInput
}

input FlavorUpdateInput {
  name: String
  egg: EggUpdateOneRequiredWithoutFlavorsInput
  cursors: CursorUpdateManyWithoutFlavorInput
}

input FlavorUpdateManyDataInput {
  name: String
}

input FlavorUpdateManyMutationInput {
  name: String
}

input FlavorUpdateManyWithoutEggInput {
  create: [FlavorCreateWithoutEggInput!]
  connect: [FlavorWhereUniqueInput!]
  set: [FlavorWhereUniqueInput!]
  disconnect: [FlavorWhereUniqueInput!]
  delete: [FlavorWhereUniqueInput!]
  update: [FlavorUpdateWithWhereUniqueWithoutEggInput!]
  updateMany: [FlavorUpdateManyWithWhereNestedInput!]
  deleteMany: [FlavorScalarWhereInput!]
  upsert: [FlavorUpsertWithWhereUniqueWithoutEggInput!]
}

input FlavorUpdateManyWithWhereNestedInput {
  where: FlavorScalarWhereInput!
  data: FlavorUpdateManyDataInput!
}

input FlavorUpdateOneRequiredWithoutCursorsInput {
  create: FlavorCreateWithoutCursorsInput
  connect: FlavorWhereUniqueInput
  update: FlavorUpdateWithoutCursorsDataInput
  upsert: FlavorUpsertWithoutCursorsInput
}

input FlavorUpdateWithoutCursorsDataInput {
  name: String
  egg: EggUpdateOneRequiredWithoutFlavorsInput
}

input FlavorUpdateWithoutEggDataInput {
  name: String
  cursors: CursorUpdateManyWithoutFlavorInput
}

input FlavorUpdateWithWhereUniqueWithoutEggInput {
  where: FlavorWhereUniqueInput!
  data: FlavorUpdateWithoutEggDataInput!
}

input FlavorUpsertWithoutCursorsInput {
  update: FlavorUpdateWithoutCursorsDataInput!
  create: FlavorCreateWithoutCursorsInput!
}

input FlavorUpsertWithWhereUniqueWithoutEggInput {
  where: FlavorWhereUniqueInput!
  update: FlavorUpdateWithoutEggDataInput!
  create: FlavorCreateWithoutEggInput!
}

input FlavorWhereInput {
  """Logical AND on all given filters."""
  AND: [FlavorWhereInput!]

  """Logical OR on all given filters."""
  OR: [FlavorWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [FlavorWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  egg: EggWhereInput
  cursors_every: CursorWhereInput
  cursors_some: CursorWhereInput
  cursors_none: CursorWhereInput
}

input FlavorWhereUniqueInput {
  id: ID
}

"""
The `Long` scalar type represents non-fractional signed whole numeric values.
Long can represent values between -(2^63) and 2^63 - 1.
"""
scalar Long

type Mutation {
  createUser(data: UserCreateInput!): User!
  createEgg(data: EggCreateInput!): Egg!
  createFlavor(data: FlavorCreateInput!): Flavor!
  createCursor(data: CursorCreateInput!): Cursor!
  createFile(data: FileCreateInput!): File!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateEgg(data: EggUpdateInput!, where: EggWhereUniqueInput!): Egg
  updateFlavor(data: FlavorUpdateInput!, where: FlavorWhereUniqueInput!): Flavor
  updateCursor(data: CursorUpdateInput!, where: CursorWhereUniqueInput!): Cursor
  updateFile(data: FileUpdateInput!, where: FileWhereUniqueInput!): File
  deleteUser(where: UserWhereUniqueInput!): User
  deleteEgg(where: EggWhereUniqueInput!): Egg
  deleteFlavor(where: FlavorWhereUniqueInput!): Flavor
  deleteCursor(where: CursorWhereUniqueInput!): Cursor
  deleteFile(where: FileWhereUniqueInput!): File
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  upsertEgg(where: EggWhereUniqueInput!, create: EggCreateInput!, update: EggUpdateInput!): Egg!
  upsertFlavor(where: FlavorWhereUniqueInput!, create: FlavorCreateInput!, update: FlavorUpdateInput!): Flavor!
  upsertCursor(where: CursorWhereUniqueInput!, create: CursorCreateInput!, update: CursorUpdateInput!): Cursor!
  upsertFile(where: FileWhereUniqueInput!, create: FileCreateInput!, update: FileUpdateInput!): File!
  updateManyUsers(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  updateManyEggs(data: EggUpdateManyMutationInput!, where: EggWhereInput): BatchPayload!
  updateManyFlavors(data: FlavorUpdateManyMutationInput!, where: FlavorWhereInput): BatchPayload!
  updateManyCursors(data: CursorUpdateManyMutationInput!, where: CursorWhereInput): BatchPayload!
  updateManyFiles(data: FileUpdateManyMutationInput!, where: FileWhereInput): BatchPayload!
  deleteManyUsers(where: UserWhereInput): BatchPayload!
  deleteManyEggs(where: EggWhereInput): BatchPayload!
  deleteManyFlavors(where: FlavorWhereInput): BatchPayload!
  deleteManyCursors(where: CursorWhereInput): BatchPayload!
  deleteManyFiles(where: FileWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

"""An object with an ID"""
interface Node {
  """The id of the object."""
  id: ID!
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

enum Permission {
  ADMIN
  USER
  EGGCREATE
  EGGUPDATE
  EGGDELETE
  PERMISSIONUPDATE
}

type Query {
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  eggs(where: EggWhereInput, orderBy: EggOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Egg]!
  flavors(where: FlavorWhereInput, orderBy: FlavorOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Flavor]!
  cursors(where: CursorWhereInput, orderBy: CursorOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Cursor]!
  files(where: FileWhereInput, orderBy: FileOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [File]!
  user(where: UserWhereUniqueInput!): User
  egg(where: EggWhereUniqueInput!): Egg
  flavor(where: FlavorWhereUniqueInput!): Flavor
  cursor(where: CursorWhereUniqueInput!): Cursor
  file(where: FileWhereUniqueInput!): File
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  eggsConnection(where: EggWhereInput, orderBy: EggOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): EggConnection!
  flavorsConnection(where: FlavorWhereInput, orderBy: FlavorOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): FlavorConnection!
  cursorsConnection(where: CursorWhereInput, orderBy: CursorOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): CursorConnection!
  filesConnection(where: FileWhereInput, orderBy: FileOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): FileConnection!

  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node
}

type Subscription {
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
  egg(where: EggSubscriptionWhereInput): EggSubscriptionPayload
  flavor(where: FlavorSubscriptionWhereInput): FlavorSubscriptionPayload
  cursor(where: CursorSubscriptionWhereInput): CursorSubscriptionPayload
  file(where: FileSubscriptionWhereInput): FileSubscriptionPayload
}

type User implements Node {
  id: ID!
  firstName: String!
  lastName: String!
  username: String!
  email: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  password: String!
  resetToken: String
  resetTokenExpiry: String
  permissions: [Permission!]!
  eggs(where: EggWhereInput, orderBy: EggOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Egg!]
}

"""A connection to a list of items."""
type UserConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  id: ID
  firstName: String!
  lastName: String!
  username: String!
  email: String!
  password: String!
  resetToken: String
  resetTokenExpiry: String
  permissions: UserCreatepermissionsInput
  eggs: EggCreateManyWithoutUserInput
}

input UserCreateOneWithoutEggsInput {
  create: UserCreateWithoutEggsInput
  connect: UserWhereUniqueInput
}

input UserCreatepermissionsInput {
  set: [Permission!]
}

input UserCreateWithoutEggsInput {
  id: ID
  firstName: String!
  lastName: String!
  username: String!
  email: String!
  password: String!
  resetToken: String
  resetTokenExpiry: String
  permissions: UserCreatepermissionsInput
}

"""An edge in a connection."""
type UserEdge {
  """The item at the end of the edge."""
  node: User!

  """A cursor for use in pagination."""
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  firstName_ASC
  firstName_DESC
  lastName_ASC
  lastName_DESC
  username_ASC
  username_DESC
  email_ASC
  email_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  password_ASC
  password_DESC
  resetToken_ASC
  resetToken_DESC
  resetTokenExpiry_ASC
  resetTokenExpiry_DESC
}

type UserPreviousValues {
  id: ID!
  firstName: String!
  lastName: String!
  username: String!
  email: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  password: String!
  resetToken: String
  resetTokenExpiry: String
  permissions: [Permission!]!
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [UserSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: UserWhereInput
}

input UserUpdateInput {
  firstName: String
  lastName: String
  username: String
  email: String
  password: String
  resetToken: String
  resetTokenExpiry: String
  permissions: UserUpdatepermissionsInput
  eggs: EggUpdateManyWithoutUserInput
}

input UserUpdateManyMutationInput {
  firstName: String
  lastName: String
  username: String
  email: String
  password: String
  resetToken: String
  resetTokenExpiry: String
  permissions: UserUpdatepermissionsInput
}

input UserUpdateOneRequiredWithoutEggsInput {
  create: UserCreateWithoutEggsInput
  connect: UserWhereUniqueInput
  update: UserUpdateWithoutEggsDataInput
  upsert: UserUpsertWithoutEggsInput
}

input UserUpdatepermissionsInput {
  set: [Permission!]
}

input UserUpdateWithoutEggsDataInput {
  firstName: String
  lastName: String
  username: String
  email: String
  password: String
  resetToken: String
  resetTokenExpiry: String
  permissions: UserUpdatepermissionsInput
}

input UserUpsertWithoutEggsInput {
  update: UserUpdateWithoutEggsDataInput!
  create: UserCreateWithoutEggsInput!
}

input UserWhereInput {
  """Logical AND on all given filters."""
  AND: [UserWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  firstName: String

  """All values that are not equal to given value."""
  firstName_not: String

  """All values that are contained in given list."""
  firstName_in: [String!]

  """All values that are not contained in given list."""
  firstName_not_in: [String!]

  """All values less than the given value."""
  firstName_lt: String

  """All values less than or equal the given value."""
  firstName_lte: String

  """All values greater than the given value."""
  firstName_gt: String

  """All values greater than or equal the given value."""
  firstName_gte: String

  """All values containing the given string."""
  firstName_contains: String

  """All values not containing the given string."""
  firstName_not_contains: String

  """All values starting with the given string."""
  firstName_starts_with: String

  """All values not starting with the given string."""
  firstName_not_starts_with: String

  """All values ending with the given string."""
  firstName_ends_with: String

  """All values not ending with the given string."""
  firstName_not_ends_with: String
  lastName: String

  """All values that are not equal to given value."""
  lastName_not: String

  """All values that are contained in given list."""
  lastName_in: [String!]

  """All values that are not contained in given list."""
  lastName_not_in: [String!]

  """All values less than the given value."""
  lastName_lt: String

  """All values less than or equal the given value."""
  lastName_lte: String

  """All values greater than the given value."""
  lastName_gt: String

  """All values greater than or equal the given value."""
  lastName_gte: String

  """All values containing the given string."""
  lastName_contains: String

  """All values not containing the given string."""
  lastName_not_contains: String

  """All values starting with the given string."""
  lastName_starts_with: String

  """All values not starting with the given string."""
  lastName_not_starts_with: String

  """All values ending with the given string."""
  lastName_ends_with: String

  """All values not ending with the given string."""
  lastName_not_ends_with: String
  username: String

  """All values that are not equal to given value."""
  username_not: String

  """All values that are contained in given list."""
  username_in: [String!]

  """All values that are not contained in given list."""
  username_not_in: [String!]

  """All values less than the given value."""
  username_lt: String

  """All values less than or equal the given value."""
  username_lte: String

  """All values greater than the given value."""
  username_gt: String

  """All values greater than or equal the given value."""
  username_gte: String

  """All values containing the given string."""
  username_contains: String

  """All values not containing the given string."""
  username_not_contains: String

  """All values starting with the given string."""
  username_starts_with: String

  """All values not starting with the given string."""
  username_not_starts_with: String

  """All values ending with the given string."""
  username_ends_with: String

  """All values not ending with the given string."""
  username_not_ends_with: String
  email: String

  """All values that are not equal to given value."""
  email_not: String

  """All values that are contained in given list."""
  email_in: [String!]

  """All values that are not contained in given list."""
  email_not_in: [String!]

  """All values less than the given value."""
  email_lt: String

  """All values less than or equal the given value."""
  email_lte: String

  """All values greater than the given value."""
  email_gt: String

  """All values greater than or equal the given value."""
  email_gte: String

  """All values containing the given string."""
  email_contains: String

  """All values not containing the given string."""
  email_not_contains: String

  """All values starting with the given string."""
  email_starts_with: String

  """All values not starting with the given string."""
  email_not_starts_with: String

  """All values ending with the given string."""
  email_ends_with: String

  """All values not ending with the given string."""
  email_not_ends_with: String
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  password: String

  """All values that are not equal to given value."""
  password_not: String

  """All values that are contained in given list."""
  password_in: [String!]

  """All values that are not contained in given list."""
  password_not_in: [String!]

  """All values less than the given value."""
  password_lt: String

  """All values less than or equal the given value."""
  password_lte: String

  """All values greater than the given value."""
  password_gt: String

  """All values greater than or equal the given value."""
  password_gte: String

  """All values containing the given string."""
  password_contains: String

  """All values not containing the given string."""
  password_not_contains: String

  """All values starting with the given string."""
  password_starts_with: String

  """All values not starting with the given string."""
  password_not_starts_with: String

  """All values ending with the given string."""
  password_ends_with: String

  """All values not ending with the given string."""
  password_not_ends_with: String
  resetToken: String

  """All values that are not equal to given value."""
  resetToken_not: String

  """All values that are contained in given list."""
  resetToken_in: [String!]

  """All values that are not contained in given list."""
  resetToken_not_in: [String!]

  """All values less than the given value."""
  resetToken_lt: String

  """All values less than or equal the given value."""
  resetToken_lte: String

  """All values greater than the given value."""
  resetToken_gt: String

  """All values greater than or equal the given value."""
  resetToken_gte: String

  """All values containing the given string."""
  resetToken_contains: String

  """All values not containing the given string."""
  resetToken_not_contains: String

  """All values starting with the given string."""
  resetToken_starts_with: String

  """All values not starting with the given string."""
  resetToken_not_starts_with: String

  """All values ending with the given string."""
  resetToken_ends_with: String

  """All values not ending with the given string."""
  resetToken_not_ends_with: String
  resetTokenExpiry: String

  """All values that are not equal to given value."""
  resetTokenExpiry_not: String

  """All values that are contained in given list."""
  resetTokenExpiry_in: [String!]

  """All values that are not contained in given list."""
  resetTokenExpiry_not_in: [String!]

  """All values less than the given value."""
  resetTokenExpiry_lt: String

  """All values less than or equal the given value."""
  resetTokenExpiry_lte: String

  """All values greater than the given value."""
  resetTokenExpiry_gt: String

  """All values greater than or equal the given value."""
  resetTokenExpiry_gte: String

  """All values containing the given string."""
  resetTokenExpiry_contains: String

  """All values not containing the given string."""
  resetTokenExpiry_not_contains: String

  """All values starting with the given string."""
  resetTokenExpiry_starts_with: String

  """All values not starting with the given string."""
  resetTokenExpiry_not_starts_with: String

  """All values ending with the given string."""
  resetTokenExpiry_ends_with: String

  """All values not ending with the given string."""
  resetTokenExpiry_not_ends_with: String
  eggs_every: EggWhereInput
  eggs_some: EggWhereInput
  eggs_none: EggWhereInput
}

input UserWhereUniqueInput {
  id: ID
  username: String
  email: String
}
